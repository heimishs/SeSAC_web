<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script src="/socket.io/socket.io.js"></script>

    <!-- bootstrap CSS CDN -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
  </head>
  <style>
    html,
    body {
      padding: 0px;
      margin: 0px;
      background-color: #e0e0e0;
    }

    p {
      margin: 0px;
    }

    header {
      width: 100%;
      height: 40px;
      line-height: 40px;
      border-bottom: 1px solid #48b179;
      text-align: center;
      font-weight: bold;
    }

    .notice {
      text-align: center;
      margin: 20px 0px;
    }

    .wrap {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      width: 500px;
      min-height: 500px;
      margin: 0 auto;
      border-radius: 10px;
      background-color: #fff;
    }

    .wrap header {
      width: 100%;
      height: 60px;
    }

    .wrap main {
      width: 100%;
      min-height: 400px;
    }

    .speech.me {
      display: inline-block;
      width: 100%;
      text-align: right;
      padding: 10px;
      box-sizing: border-box;
    }

    .speech.me > span {
      display: inline-block;
      padding: 10px;
      background-color: #48b179;
      box-sizing: border-box;
      border-radius: 10px;
      color: #fff;
    }

    .speech.other {
      position: relative;
      display: inline-block;
      width: 100%;
      text-align: left;
      padding: 20px;
      box-sizing: border-box;
    }

    .speech.other > .nickname {
      position: absolute;
      top: -20px;
      left: 15px;
      display: inline-block;
      padding: 10px;
      box-sizing: border-box;
      font-size: 14px;
    }

    .speech.other > .msg-box {
      padding: 10px;
      background-color: #d8d8d8;
      box-sizing: border-box;
      border-radius: 10px;
    }

    .inputBox {
      display: flex;
      width: 100%;
      justify-content: space-between;
      padding: 10px;
      box-sizing: border-box;
    }
    .inputBox input {
      width: 100%;
      border: none;
      background-color: #e2e2e2;
      border-radius: 20px;
      padding: 0px 20px;
      box-sizing: border-box;
    }

    .inputBox button {
      width: 60px;
      height: 40px;
      background-color: #48b179;
      border-radius: 5px;
      border: none;
      margin-left: 10px;
      color: #fff;
      font-weight: bold;
    }

    /* DM */
    #dm-select {
      min-width: 80px;
      margin-right: 5px;
      border: none;
      border-radius: 3px;
      text-align: center;
      outline: none;
    }

    .speech.other.dm > .msg-box {
      background-color: #ffffff75;
    }
  </style>
  <body>
    <div class="entry-box">
      <input type="text" id="nickname" placeholder="닉네임 입력" />
      <button onclick="join()">채팅방 입장하기</button>
    </div>
    <div class="wrap d-none">
      <header>
        <p>A번 대화방입니다</p>
      </header>
      <main>
        <div class="notice"></div>
        <!-- <div class="speech me">
          <span>대화내용입니다</span>
        </div>
        <div class="speech other">
          <span class="nickname">nickname</span>
          <span class="Chat">대화내용입니다</span>
        </div> -->
      </main>
      <footer>
        <div>
          <form id="msg-form" class="msg-form">
            <div class="inputBox">
              <select id="dm-select"></select>
              <input type="text" />
              <button>전송</button>
            </div>
          </form>
        </div>
      </footer>
    </div>

    <script>
      const socket = io();
      const chatContainer = document.querySelector(".notice");
      const chatForm = document.querySelector("#msg-form");
      const input = chatForm.querySelector("input");
      // 추가
      const container = document.querySelector(".wrap");
      const entryBox = document.querySelector(".entry-box");
      const nickInput = document.querySelector("#nickname");
      const select = document.querySelector("#dm-select");

      let myNick; // 입장 성공했을때 나의 닉네임 저장할 변수
      // 닉네임 사용 1
      function join() {
        socket.emit("checkNick", nickInput.value);
      }

      // 닉네임 사용 3-1 입장실패
      socket.on("error", (errMsg) => {
        alert(errMsg);
      });

      // 닉네임 사용 3-2 내 닉네임 정보 저장 및 화면 변경
      socket.on("entrySuccess", (nickname) => {
        myNick = nickname;
        entryBox.classList.add("d-none");
        container.classList.remove("d-none");
      });

      //3 입장 안내
      socket.on("notice", (notcie) => {
        const p = document.createElement("p");
        p.textContent = notcie;
        chatContainer.append(p);
      });

      // 4 채팅 주고받기
      chatForm.addEventListener("submit", (e) => {
        e.preventDefault();
        if (input.value.trim() === "") return;

        // 4-1 버튼을 눌렀을때 메세지를 서버에게 전달
        // (dm 일때 객체정보 전달)
        const sendData = {
          myNick: myNick,
          dm: select.value, //채팅을 보내고자 하는 클라이언트의 소켓 id
          msg: input.value, // 메세지 내용
        };
        socket.emit("send", sendData);
        input.value = "";
      });

      // 메세지를 전달받고 내 메세지와 다른 클라이언트의 메세지를 구분
      socket.on("message", (data) => {
        // data:{id, message}
        // console.log(data.id); // 보낸 사람의 아이디;
        // console.log(socket.id); // 나의 아이디

        //나의 아이디와 다른 사람의 아이디를 통해
        // ui에 맞게 제작

        const div = document.createElement("div");
        const span = document.createElement("span"); //채팅내용
        span.innerText = data.message;
        span.classList.add("msg-box");
        div.classList.add("speech");

        console.log(data);
        if (data.isDm) {
          // DM일 경우에 말풍선 맨 앞에 [귓속말] 단어 보이도록
          span.innerText = "[귓속말] " + data.message;
        } else {
          span.innerText = data.message;
        }

        if (data.id === myNick) {
          // 내가 보낸 메세지
          div.classList.add("me");
          div.append(span);
        } else {
          // 남이 보낸 메세지
          div.classList.add("other");
          const nickname = document.createElement("span");
          nickname.classList.add("nickname");
          nickname.innerText = data.id;
          span.innerText = data.message;
          div.append(nickname, span);
        }

        chatContainer.append(div);
        chatContainer.scrollTop = chatContainer.scrollHeight;
      });

      socket.on("updateNicks", (nickInfo) => {
        console.log("nickInfo", nickInfo); //{socket:id : nickname}

        let = option = `<option value="all">전체</option>`;
        for (const key in nickInfo) {
          // console.log("key:", key);
          // console.log("value:", nickInfo[key]);
          option += `<option value="${key}">${nickInfo[key]}</option>`;
        }

        select.innerHTML = option;
        console.log(option);
      });
    </script>
  </body>
</html>
